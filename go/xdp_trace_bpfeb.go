// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadXdp_trace returns the embedded CollectionSpec for xdp_trace.
func loadXdp_trace() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Xdp_traceBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load xdp_trace: %w", err)
	}

	return spec, err
}

// loadXdp_traceObjects loads xdp_trace and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*xdp_traceObjects
//	*xdp_tracePrograms
//	*xdp_traceMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadXdp_traceObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadXdp_trace()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// xdp_traceSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdp_traceSpecs struct {
	xdp_traceProgramSpecs
	xdp_traceMapSpecs
}

// xdp_traceSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdp_traceProgramSpecs struct {
	FentryXdp *ebpf.ProgramSpec `ebpf:"fentry_xdp"`
	FexitXdp  *ebpf.ProgramSpec `ebpf:"fexit_xdp"`
}

// xdp_traceMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdp_traceMapSpecs struct {
}

// xdp_traceObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadXdp_traceObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdp_traceObjects struct {
	xdp_tracePrograms
	xdp_traceMaps
}

func (o *xdp_traceObjects) Close() error {
	return _Xdp_traceClose(
		&o.xdp_tracePrograms,
		&o.xdp_traceMaps,
	)
}

// xdp_traceMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadXdp_traceObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdp_traceMaps struct {
}

func (m *xdp_traceMaps) Close() error {
	return _Xdp_traceClose()
}

// xdp_tracePrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadXdp_traceObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdp_tracePrograms struct {
	FentryXdp *ebpf.Program `ebpf:"fentry_xdp"`
	FexitXdp  *ebpf.Program `ebpf:"fexit_xdp"`
}

func (p *xdp_tracePrograms) Close() error {
	return _Xdp_traceClose(
		p.FentryXdp,
		p.FexitXdp,
	)
}

func _Xdp_traceClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed xdp_trace_bpfeb.o
var _Xdp_traceBytes []byte
