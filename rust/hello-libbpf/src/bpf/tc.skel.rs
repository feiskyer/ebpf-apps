// SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause)
//
// THIS FILE IS AUTOGENERATED BY CARGO-LIBBPF-GEN!

pub use self::imp::*;

#[allow(dead_code)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
#[allow(clippy::absolute_paths)]
#[allow(clippy::upper_case_acronyms)]
#[allow(clippy::zero_repeat_side_effects)]
#[warn(single_use_lifetimes)]
mod imp {
    #[allow(unused_imports)]
    use super::*;
    use libbpf_rs::libbpf_sys;
    use libbpf_rs::skel::OpenSkel;
    use libbpf_rs::skel::Skel;
    use libbpf_rs::skel::SkelBuilder;
    use libbpf_rs::AsRawLibbpf as _;
    use libbpf_rs::MapCore as _;
    fn build_skel_config(
    ) -> libbpf_rs::Result<libbpf_rs::__internal_skel::ObjectSkeletonConfig<'static>> {
        let mut builder = libbpf_rs::__internal_skel::ObjectSkeletonConfigBuilder::new(DATA);
        builder
            .name("tc_bpf")
            .map("allow_ports", false)
            .map("tc_bpf.data", true)
            .map("tc_bpf.rodata", false)
            .prog("handle_tc");
        builder.build()
    }
    pub struct OpenTcMaps<'obj> {
        pub allow_ports: libbpf_rs::OpenMapMut<'obj>,
        pub data: libbpf_rs::OpenMapMut<'obj>,
        pub data_data: &'obj mut types::data,
        pub rodata: libbpf_rs::OpenMapMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> OpenTcMaps<'obj> {
        #[allow(unused_variables)]
        unsafe fn new(
            config: &libbpf_rs::__internal_skel::ObjectSkeletonConfig<'_>,
            object: &mut libbpf_rs::OpenObject,
        ) -> libbpf_rs::Result<Self> {
            let mut allow_ports = None;
            let mut data = None;
            let mut rodata = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::OpenObject, &'obj mut libbpf_rs::OpenObject>(
                    object,
                )
            };
            #[allow(clippy::never_loop)]
            for map in object.maps_mut() {
                let name = map.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "map has invalid name",
                    ))
                })?;
                #[allow(clippy::match_single_binding)]
                match name {
                    "allow_ports" => allow_ports = Some(map),
                    "tc_bpf.data" => data = Some(map),
                    "tc_bpf.rodata" => rodata = Some(map),
                    _ => panic!("encountered unexpected map: `{name}`"),
                }
            }

            let slf = Self {
                allow_ports: allow_ports.expect("map `allow_ports` not present"),
                data: data.expect("map `data` not present"),
                data_data: unsafe {
                    config
                        .map_mmap_ptr(1)
                        .expect("BPF map `data` does not have mmap pointer")
                        .cast::<types::data>()
                        .as_mut()
                        .expect("BPF map `data` mmap pointer is NULL")
                },
                rodata: rodata.expect("map `rodata` not present"),
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct TcMaps<'obj> {
        pub allow_ports: libbpf_rs::MapMut<'obj>,
        pub data: libbpf_rs::MapMut<'obj>,
        pub data_data: &'obj mut types::data,
        pub rodata: libbpf_rs::MapMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> TcMaps<'obj> {
        #[allow(unused_variables)]
        unsafe fn new(
            config: &libbpf_rs::__internal_skel::ObjectSkeletonConfig<'_>,
            object: &mut libbpf_rs::Object,
        ) -> libbpf_rs::Result<Self> {
            let mut allow_ports = None;
            let mut data = None;
            let mut rodata = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::Object, &'obj mut libbpf_rs::Object>(object)
            };
            #[allow(clippy::never_loop)]
            for map in object.maps_mut() {
                let name = map.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "map has invalid name",
                    ))
                })?;
                #[allow(clippy::match_single_binding)]
                match name {
                    "allow_ports" => allow_ports = Some(map),
                    "tc_bpf.data" => data = Some(map),
                    "tc_bpf.rodata" => rodata = Some(map),
                    _ => panic!("encountered unexpected map: `{name}`"),
                }
            }

            let slf = Self {
                allow_ports: allow_ports.expect("map `allow_ports` not present"),
                data: data.expect("map `data` not present"),
                data_data: unsafe {
                    config
                        .map_mmap_ptr(1)
                        .expect("BPF map `data` does not have mmap pointer")
                        .cast::<types::data>()
                        .as_mut()
                        .expect("BPF map `data` mmap pointer is NULL")
                },
                rodata: rodata.expect("map `rodata` not present"),
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct OpenTcProgs<'obj> {
        pub handle_tc: libbpf_rs::OpenProgramMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> OpenTcProgs<'obj> {
        unsafe fn new(object: &mut libbpf_rs::OpenObject) -> libbpf_rs::Result<Self> {
            let mut handle_tc = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::OpenObject, &'obj mut libbpf_rs::OpenObject>(
                    object,
                )
            };
            for prog in object.progs_mut() {
                let name = prog.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "prog has invalid name",
                    ))
                })?;
                match name {
                    "handle_tc" => handle_tc = Some(prog),
                    _ => panic!("encountered unexpected prog: `{name}`"),
                }
            }

            let slf = Self {
                handle_tc: handle_tc.expect("prog `handle_tc` not present"),
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct TcProgs<'obj> {
        pub handle_tc: libbpf_rs::ProgramMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> TcProgs<'obj> {
        #[allow(unused_variables)]
        fn new(open_progs: OpenTcProgs<'obj>) -> Self {
            Self {
                handle_tc: unsafe {
                    libbpf_rs::ProgramMut::new_mut(open_progs.handle_tc.as_libbpf_object().as_mut())
                },
                _phantom: std::marker::PhantomData,
            }
        }
    }
    struct OwnedRef<'obj, O> {
        object: Option<&'obj mut std::mem::MaybeUninit<O>>,
    }

    impl<'obj, O> OwnedRef<'obj, O> {
        /// # Safety
        /// The object has to be initialized.
        unsafe fn new(object: &'obj mut std::mem::MaybeUninit<O>) -> Self {
            Self {
                object: Some(object),
            }
        }

        fn as_ref(&self) -> &O {
            // SAFETY: As per the contract during construction, the
            //         object has to be initialized.
            unsafe { self.object.as_ref().unwrap().assume_init_ref() }
        }

        fn as_mut(&mut self) -> &mut O {
            // SAFETY: As per the contract during construction, the
            //         object has to be initialized.
            unsafe { self.object.as_mut().unwrap().assume_init_mut() }
        }

        fn take(mut self) -> &'obj mut std::mem::MaybeUninit<O> {
            self.object.take().unwrap()
        }
    }

    impl<O> Drop for OwnedRef<'_, O> {
        fn drop(&mut self) {
            if let Some(object) = &mut self.object {
                unsafe { object.assume_init_drop() }
            }
        }
    }

    #[derive(Default)]
    pub struct TcSkelBuilder {
        pub obj_builder: libbpf_rs::ObjectBuilder,
    }

    impl<'obj> TcSkelBuilder {
        fn open_opts_impl(
            self,
            open_opts: *const libbpf_sys::bpf_object_open_opts,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenTcSkel<'obj>> {
            let skel_config = build_skel_config()?;
            let skel_ptr = skel_config.as_libbpf_object();

            let ret =
                unsafe { libbpf_sys::bpf_object__open_skeleton(skel_ptr.as_ptr(), open_opts) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            // SAFETY: `skel_ptr` points to a valid object after the
            //         open call.
            let obj_ptr = unsafe { *skel_ptr.as_ref().obj };
            // SANITY: `bpf_object__open_skeleton` should have
            //         allocated the object.
            let obj_ptr = std::ptr::NonNull::new(obj_ptr).unwrap();
            // SAFETY: `obj_ptr` points to an opened object after
            //         skeleton open.
            let obj = unsafe { libbpf_rs::OpenObject::from_ptr(obj_ptr) };
            let _obj = object.write(obj);
            // SAFETY: We just wrote initialized data to `object`.
            let mut obj_ref = unsafe { OwnedRef::new(object) };

            #[allow(unused_mut)]
            let mut skel = OpenTcSkel {
                maps: unsafe { OpenTcMaps::new(&skel_config, obj_ref.as_mut())? },
                progs: unsafe { OpenTcProgs::new(obj_ref.as_mut())? },
                obj: obj_ref,
                // SAFETY: Our `struct_ops` type contains only pointers,
                //         which are allowed to be NULL.
                // TODO: Generate and use a `Default` representation
                //       instead, to cut down on unsafe code.
                struct_ops: unsafe { std::mem::zeroed() },
                skel_config,
            };

            Ok(skel)
        }
    }

    impl<'obj> SkelBuilder<'obj> for TcSkelBuilder {
        type Output = OpenTcSkel<'obj>;
        fn open(
            self,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenTcSkel<'obj>> {
            self.open_opts_impl(std::ptr::null(), object)
        }

        fn open_opts(
            self,
            open_opts: libbpf_sys::bpf_object_open_opts,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenTcSkel<'obj>> {
            self.open_opts_impl(&open_opts, object)
        }

        fn object_builder(&self) -> &libbpf_rs::ObjectBuilder {
            &self.obj_builder
        }
        fn object_builder_mut(&mut self) -> &mut libbpf_rs::ObjectBuilder {
            &mut self.obj_builder
        }
    }

    #[derive(Debug, Clone)]
    #[repr(C)]
    pub struct StructOps {}

    impl StructOps {}
    pub mod types {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct __anon_1 {
            pub r#type: *mut [i32; 2],
            pub max_entries: *mut [i32; 10],
            pub value: *mut u16,
            pub key: *mut u32,
        }
        impl Default for __anon_1 {
            fn default() -> Self {
                Self {
                    r#type: std::ptr::null_mut(),
                    max_entries: std::ptr::null_mut(),
                    value: std::ptr::null_mut(),
                    key: std::ptr::null_mut(),
                }
            }
        }
        #[derive(Debug, Default, Copy, Clone)]
        #[repr(C)]
        pub struct __sk_buff {
            pub len: u32,
            pub pkt_type: u32,
            pub mark: u32,
            pub queue_mapping: u32,
            pub protocol: u32,
            pub vlan_present: u32,
            pub vlan_tci: u32,
            pub vlan_proto: u32,
            pub priority: u32,
            pub ingress_ifindex: u32,
            pub ifindex: u32,
            pub tc_index: u32,
            pub cb: [u32; 5],
            pub hash: u32,
            pub tc_classid: u32,
            pub data: u32,
            pub data_end: u32,
            pub napi_id: u32,
            pub family: u32,
            pub remote_ip4: u32,
            pub local_ip4: u32,
            pub remote_ip6: [u32; 4],
            pub local_ip6: [u32; 4],
            pub remote_port: u32,
            pub local_port: u32,
            pub data_meta: u32,
            pub __anon_2: __anon_2,
            pub tstamp: u64,
            pub wire_len: u32,
            pub gso_segs: u32,
            pub __anon_3: __anon_3,
            pub gso_size: u32,
            pub tstamp_type: u8,
            pub hwtstamp: u64,
        }
        #[derive(Copy, Clone)]
        #[repr(C)]
        pub union __anon_2 {
            pub flow_keys: *mut std::ffi::c_void,
        }
        impl std::fmt::Debug for __anon_2 {
            fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                write!(f, "(???)")
            }
        }
        impl Default for __anon_2 {
            fn default() -> Self {
                Self {
                    flow_keys: std::ptr::null_mut(),
                }
            }
        }
        #[derive(Copy, Clone)]
        #[repr(C)]
        pub union __anon_3 {
            pub sk: *mut std::ffi::c_void,
        }
        impl std::fmt::Debug for __anon_3 {
            fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                write!(f, "(???)")
            }
        }
        impl Default for __anon_3 {
            fn default() -> Self {
                Self {
                    sk: std::ptr::null_mut(),
                }
            }
        }
        #[derive(Debug, Default, Copy, Clone)]
        #[repr(C)]
        pub struct ethhdr {
            pub h_dest: [u8; 6],
            pub h_source: [u8; 6],
            pub h_proto: u16,
        }
        #[derive(Debug, Default, Copy, Clone)]
        #[repr(C)]
        pub struct iphdr {
            pub __pad_0: [u8; 1],
            pub tos: u8,
            pub tot_len: u16,
            pub id: u16,
            pub frag_off: u16,
            pub ttl: u8,
            pub protocol: u8,
            pub check: u16,
            pub __anon_4: __anon_4,
        }
        #[derive(Copy, Clone)]
        #[repr(C)]
        pub union __anon_4 {
            pub __anon_5: __anon_5,
            pub addrs: __anon_5,
        }
        impl std::fmt::Debug for __anon_4 {
            fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                write!(f, "(???)")
            }
        }
        impl Default for __anon_4 {
            fn default() -> Self {
                Self {
                    __anon_5: __anon_5::default(),
                }
            }
        }
        #[derive(Debug, Default, Copy, Clone)]
        #[repr(C)]
        pub struct __anon_5 {
            pub saddr: u32,
            pub daddr: u32,
        }
        #[derive(Debug, Default, Copy, Clone)]
        #[repr(C)]
        pub struct ipv6hdr {
            pub __pad_0: [u8; 1],
            pub flow_lbl: [u8; 3],
            pub payload_len: u16,
            pub nexthdr: u8,
            pub hop_limit: u8,
            pub __anon_6: __anon_6,
        }
        #[derive(Copy, Clone)]
        #[repr(C)]
        pub union __anon_6 {
            pub __anon_7: __anon_7,
            pub addrs: __anon_7,
        }
        impl std::fmt::Debug for __anon_6 {
            fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                write!(f, "(???)")
            }
        }
        impl Default for __anon_6 {
            fn default() -> Self {
                Self {
                    __anon_7: __anon_7::default(),
                }
            }
        }
        #[derive(Debug, Default, Copy, Clone)]
        #[repr(C)]
        pub struct __anon_7 {
            pub saddr: in6_addr,
            pub daddr: in6_addr,
        }
        #[derive(Debug, Default, Copy, Clone)]
        #[repr(C)]
        pub struct in6_addr {
            pub in6_u: __anon_8,
        }
        #[derive(Copy, Clone)]
        #[repr(C)]
        pub union __anon_8 {
            pub u6_addr8: [u8; 16],
            pub u6_addr16: [u16; 8],
            pub u6_addr32: [u32; 4],
        }
        impl std::fmt::Debug for __anon_8 {
            fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                write!(f, "(???)")
            }
        }
        impl Default for __anon_8 {
            fn default() -> Self {
                Self {
                    u6_addr8: [u8::default(); 16],
                }
            }
        }
        #[derive(Debug, Default, Copy, Clone)]
        #[repr(C)]
        pub struct tcphdr {
            pub source: u16,
            pub dest: u16,
            pub seq: u32,
            pub ack_seq: u32,
            pub __pad_12: [u8; 2],
            pub window: u16,
            pub check: u16,
            pub urg_ptr: u16,
        }
        #[derive(Debug, Default, Copy, Clone)]
        #[repr(C)]
        pub struct udphdr {
            pub source: u16,
            pub dest: u16,
            pub len: u16,
            pub check: u16,
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct data {
            pub rc_allow: u8,
            pub rc_disallow: u8,
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct rodata {}
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct license {
            pub _license: [i8; 4],
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct maps {
            pub allow_ports: __anon_1,
        }
    }
    pub struct OpenTcSkel<'obj> {
        obj: OwnedRef<'obj, libbpf_rs::OpenObject>,
        pub maps: OpenTcMaps<'obj>,
        pub progs: OpenTcProgs<'obj>,
        pub struct_ops: StructOps,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'obj>,
    }

    impl<'obj> OpenSkel<'obj> for OpenTcSkel<'obj> {
        type Output = TcSkel<'obj>;
        fn load(self) -> libbpf_rs::Result<TcSkel<'obj>> {
            let skel_ptr = self.skel_config.as_libbpf_object().as_ptr();

            let ret = unsafe { libbpf_sys::bpf_object__load_skeleton(skel_ptr) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            let obj_ref = self.obj.take();
            let open_obj = std::mem::replace(obj_ref, std::mem::MaybeUninit::uninit());
            // SAFETY: `open_obj` is guaranteed to be properly
            //         initialized as it came from an `OwnedRef`.
            let obj_ptr = unsafe { open_obj.assume_init().take_ptr() };
            // SAFETY: `obj_ptr` points to a loaded object after
            //         skeleton load.
            let obj = unsafe { libbpf_rs::Object::from_ptr(obj_ptr) };
            // SAFETY: `OpenObject` and `Object` are guaranteed to
            //         have the same memory layout.
            let obj_ref = unsafe {
                std::mem::transmute::<
                    &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
                    &'obj mut std::mem::MaybeUninit<libbpf_rs::Object>,
                >(obj_ref)
            };
            let _obj = obj_ref.write(obj);
            // SAFETY: We just wrote initialized data to `obj_ref`.
            let mut obj_ref = unsafe { OwnedRef::new(obj_ref) };

            Ok(TcSkel {
                maps: unsafe { TcMaps::new(&self.skel_config, obj_ref.as_mut())? },
                progs: TcProgs::new(self.progs),
                obj: obj_ref,
                struct_ops: self.struct_ops,
                skel_config: self.skel_config,
                links: TcLinks::default(),
            })
        }

        fn open_object(&self) -> &libbpf_rs::OpenObject {
            self.obj.as_ref()
        }

        fn open_object_mut(&mut self) -> &mut libbpf_rs::OpenObject {
            self.obj.as_mut()
        }
    }
    #[derive(Default)]
    pub struct TcLinks {
        pub handle_tc: Option<libbpf_rs::Link>,
    }
    pub struct TcSkel<'obj> {
        obj: OwnedRef<'obj, libbpf_rs::Object>,
        pub maps: TcMaps<'obj>,
        pub progs: TcProgs<'obj>,
        struct_ops: StructOps,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'obj>,
        pub links: TcLinks,
    }

    unsafe impl Send for TcSkel<'_> {}
    unsafe impl Sync for TcSkel<'_> {}

    impl<'obj> Skel<'obj> for TcSkel<'obj> {
        fn object(&self) -> &libbpf_rs::Object {
            self.obj.as_ref()
        }

        fn object_mut(&mut self) -> &mut libbpf_rs::Object {
            self.obj.as_mut()
        }
        fn attach(&mut self) -> libbpf_rs::Result<()> {
            let skel_ptr = self.skel_config.as_libbpf_object().as_ptr();
            let ret = unsafe { libbpf_sys::bpf_object__attach_skeleton(skel_ptr) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            self.links = TcLinks {
                handle_tc: core::ptr::NonNull::new(self.skel_config.prog_link_ptr(0)?)
                    .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }),
            };

            Ok(())
        }
    }
    impl TcSkel<'_> {
        pub fn struct_ops_raw(&self) -> *const StructOps {
            &self.struct_ops
        }

        pub fn struct_ops(&self) -> &StructOps {
            &self.struct_ops
        }
    }
    const DATA: &[u8] = &[
        127, 69, 76, 70, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 247, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
        0, 64, 0, 13, 0, 1, 0, 0, 46, 115, 116, 114, 116, 97, 98, 0, 46, 115, 121, 109, 116, 97,
        98, 0, 46, 116, 101, 120, 116, 0, 116, 99, 0, 46, 100, 97, 116, 97, 0, 46, 114, 111, 100,
        97, 116, 97, 0, 108, 105, 99, 101, 110, 115, 101, 0, 46, 109, 97, 112, 115, 0, 116, 99, 46,
        98, 112, 102, 46, 99, 0, 76, 66, 66, 48, 95, 49, 57, 0, 76, 66, 66, 48, 95, 52, 0, 76, 66,
        66, 48, 95, 55, 0, 76, 66, 66, 48, 95, 49, 49, 0, 76, 66, 66, 48, 95, 49, 51, 0, 97, 108,
        108, 111, 119, 95, 112, 111, 114, 116, 0, 76, 66, 66, 48, 95, 49, 53, 0, 76, 66, 66, 48,
        95, 49, 54, 0, 104, 97, 110, 100, 108, 101, 95, 116, 99, 46, 95, 95, 95, 95, 102, 109, 116,
        46, 49, 0, 76, 66, 66, 48, 95, 49, 56, 0, 104, 97, 110, 100, 108, 101, 95, 116, 99, 46, 95,
        95, 95, 95, 102, 109, 116, 0, 76, 66, 66, 49, 95, 50, 0, 76, 66, 66, 49, 95, 50, 49, 0, 76,
        66, 66, 49, 95, 52, 0, 76, 66, 66, 49, 95, 54, 0, 76, 66, 66, 49, 95, 56, 0, 76, 66, 66,
        49, 95, 49, 48, 0, 76, 66, 66, 49, 95, 49, 50, 0, 76, 66, 66, 49, 95, 49, 52, 0, 76, 66,
        66, 49, 95, 49, 54, 0, 76, 66, 66, 49, 95, 49, 56, 0, 76, 66, 66, 49, 95, 50, 48, 0, 76,
        66, 66, 49, 95, 50, 50, 0, 104, 97, 110, 100, 108, 101, 95, 116, 99, 0, 114, 99, 95, 100,
        105, 115, 97, 108, 108, 111, 119, 0, 114, 99, 95, 97, 108, 108, 111, 119, 0, 97, 108, 108,
        111, 119, 95, 112, 111, 114, 116, 115, 0, 95, 108, 105, 99, 101, 110, 115, 101, 0, 46, 114,
        101, 108, 46, 116, 101, 120, 116, 0, 46, 114, 101, 108, 116, 99, 0, 46, 66, 84, 70, 0, 46,
        66, 84, 70, 46, 101, 120, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 4, 0, 241, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 4, 0,
        152, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 4, 0, 184, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 85, 0, 0, 0, 0, 0, 4, 0, 120, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        93, 0, 0, 0, 0, 0, 4, 0, 192, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 0, 0, 0, 2,
        0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 3, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 4, 0, 24, 2,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 4, 0, 48, 2, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 1, 0, 6, 0, 30, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0,
        0, 0, 0, 0, 148, 0, 0, 0, 0, 0, 4, 0, 96, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156,
        0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 174, 0, 0, 0, 0, 0,
        3, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 181, 0, 0, 0, 0, 0, 3, 0, 64, 3, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 189, 0, 0, 0, 0, 0, 3, 0, 176, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 196, 0, 0, 0, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 203, 0, 0, 0, 0, 0, 3, 0, 80, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0,
        0, 0, 0, 3, 0, 160, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 218, 0, 0, 0, 0, 0, 3, 0,
        240, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 226, 0, 0, 0, 0, 0, 3, 0, 64, 2, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 234, 0, 0, 0, 0, 0, 3, 0, 144, 2, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 242, 0, 0, 0, 0, 0, 3, 0, 224, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 250, 0, 0, 0, 0, 0, 3, 0, 48, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0,
        0, 0, 3, 0, 72, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 0, 0, 18, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        160, 2, 0, 0, 0, 0, 0, 0, 20, 1, 0, 0, 17, 0, 5, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
        0, 0, 0, 32, 1, 0, 0, 17, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 41, 1,
        0, 0, 17, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 53, 1, 0, 0, 17, 0, 7,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 191, 22, 0, 0, 0, 0, 0, 0, 183, 1, 0, 0,
        0, 0, 0, 0, 99, 26, 252, 255, 0, 0, 0, 0, 191, 162, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 252, 255,
        255, 255, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 1, 0, 0, 0, 220,
        6, 0, 0, 16, 0, 0, 0, 21, 0, 2, 0, 0, 0, 0, 0, 105, 1, 0, 0, 0, 0, 0, 0, 29, 22, 92, 0, 0,
        0, 0, 0, 183, 1, 0, 0, 1, 0, 0, 0, 99, 26, 252, 255, 0, 0, 0, 0, 191, 162, 0, 0, 0, 0, 0,
        0, 7, 2, 0, 0, 252, 255, 255, 255, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
        0, 0, 1, 0, 0, 0, 21, 0, 2, 0, 0, 0, 0, 0, 105, 1, 0, 0, 0, 0, 0, 0, 29, 22, 82, 0, 0, 0,
        0, 0, 183, 1, 0, 0, 2, 0, 0, 0, 99, 26, 252, 255, 0, 0, 0, 0, 191, 162, 0, 0, 0, 0, 0, 0,
        7, 2, 0, 0, 252, 255, 255, 255, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0,
        0, 1, 0, 0, 0, 21, 0, 2, 0, 0, 0, 0, 0, 105, 1, 0, 0, 0, 0, 0, 0, 29, 22, 72, 0, 0, 0, 0,
        0, 183, 1, 0, 0, 3, 0, 0, 0, 99, 26, 252, 255, 0, 0, 0, 0, 191, 162, 0, 0, 0, 0, 0, 0, 7,
        2, 0, 0, 252, 255, 255, 255, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0,
        1, 0, 0, 0, 21, 0, 2, 0, 0, 0, 0, 0, 105, 1, 0, 0, 0, 0, 0, 0, 29, 22, 62, 0, 0, 0, 0, 0,
        183, 1, 0, 0, 4, 0, 0, 0, 99, 26, 252, 255, 0, 0, 0, 0, 191, 162, 0, 0, 0, 0, 0, 0, 7, 2,
        0, 0, 252, 255, 255, 255, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 1,
        0, 0, 0, 21, 0, 2, 0, 0, 0, 0, 0, 105, 1, 0, 0, 0, 0, 0, 0, 29, 22, 52, 0, 0, 0, 0, 0, 183,
        1, 0, 0, 5, 0, 0, 0, 99, 26, 252, 255, 0, 0, 0, 0, 191, 162, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0,
        252, 255, 255, 255, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 1, 0, 0,
        0, 21, 0, 2, 0, 0, 0, 0, 0, 105, 1, 0, 0, 0, 0, 0, 0, 29, 22, 42, 0, 0, 0, 0, 0, 183, 1, 0,
        0, 6, 0, 0, 0, 99, 26, 252, 255, 0, 0, 0, 0, 191, 162, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 252,
        255, 255, 255, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 1, 0, 0, 0,
        21, 0, 2, 0, 0, 0, 0, 0, 105, 1, 0, 0, 0, 0, 0, 0, 29, 22, 32, 0, 0, 0, 0, 0, 183, 1, 0, 0,
        7, 0, 0, 0, 99, 26, 252, 255, 0, 0, 0, 0, 191, 162, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 252, 255,
        255, 255, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 1, 0, 0, 0, 21, 0,
        2, 0, 0, 0, 0, 0, 105, 1, 0, 0, 0, 0, 0, 0, 29, 22, 22, 0, 0, 0, 0, 0, 183, 1, 0, 0, 8, 0,
        0, 0, 99, 26, 252, 255, 0, 0, 0, 0, 191, 162, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 252, 255, 255,
        255, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 1, 0, 0, 0, 21, 0, 2,
        0, 0, 0, 0, 0, 105, 1, 0, 0, 0, 0, 0, 0, 29, 22, 12, 0, 0, 0, 0, 0, 183, 1, 0, 0, 9, 0, 0,
        0, 99, 26, 252, 255, 0, 0, 0, 0, 191, 162, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 252, 255, 255,
        255, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 1, 0, 0, 0, 21, 0, 2,
        0, 0, 0, 0, 0, 105, 1, 0, 0, 0, 0, 0, 0, 29, 22, 2, 0, 0, 0, 0, 0, 183, 0, 0, 0, 0, 0, 0,
        0, 5, 0, 1, 0, 0, 0, 0, 0, 183, 0, 0, 0, 1, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0,
        255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 97, 19, 80, 0, 0, 0, 0, 0, 97, 20, 76, 0, 0, 0,
        0, 0, 191, 66, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 14, 0, 0, 0, 45, 50, 76, 0, 0, 0, 0, 0, 24, 5,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 88, 0, 0, 0, 0, 0, 0, 105, 69, 12, 0, 0, 0,
        0, 0, 85, 5, 11, 0, 8, 0, 0, 0, 183, 0, 0, 0, 2, 0, 0, 0, 7, 4, 0, 0, 34, 0, 0, 0, 45, 52,
        68, 0, 0, 0, 0, 0, 183, 4, 0, 0, 9, 0, 0, 0, 191, 37, 0, 0, 0, 0, 0, 0, 15, 69, 0, 0, 0, 0,
        0, 0, 113, 36, 0, 0, 0, 0, 0, 0, 103, 4, 0, 0, 2, 0, 0, 0, 87, 4, 0, 0, 60, 0, 0, 0, 15,
        66, 0, 0, 0, 0, 0, 0, 5, 0, 9, 0, 0, 0, 0, 0, 105, 69, 12, 0, 0, 0, 0, 0, 85, 5, 58, 0,
        134, 221, 0, 0, 183, 0, 0, 0, 2, 0, 0, 0, 7, 4, 0, 0, 54, 0, 0, 0, 45, 52, 55, 0, 0, 0, 0,
        0, 183, 0, 0, 0, 6, 0, 0, 0, 191, 37, 0, 0, 0, 0, 0, 0, 15, 5, 0, 0, 0, 0, 0, 0, 191, 66,
        0, 0, 0, 0, 0, 0, 113, 84, 0, 0, 0, 0, 0, 0, 21, 4, 13, 0, 17, 0, 0, 0, 24, 0, 0, 0, 255,
        255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 85, 4, 46, 0, 6, 0, 0, 0, 183, 0, 0, 0, 2, 0, 0, 0,
        191, 36, 0, 0, 0, 0, 0, 0, 7, 4, 0, 0, 20, 0, 0, 0, 45, 52, 42, 0, 0, 0, 0, 0, 191, 25, 0,
        0, 0, 0, 0, 0, 183, 3, 0, 0, 0, 0, 0, 0, 191, 33, 0, 0, 0, 0, 0, 0, 15, 49, 0, 0, 0, 0, 0,
        0, 183, 3, 0, 0, 2, 0, 0, 0, 5, 0, 9, 0, 0, 0, 0, 0, 183, 0, 0, 0, 2, 0, 0, 0, 191, 36, 0,
        0, 0, 0, 0, 0, 7, 4, 0, 0, 8, 0, 0, 0, 45, 52, 32, 0, 0, 0, 0, 0, 191, 25, 0, 0, 0, 0, 0,
        0, 183, 3, 0, 0, 0, 0, 0, 0, 191, 33, 0, 0, 0, 0, 0, 0, 15, 49, 0, 0, 0, 0, 0, 0, 183, 3,
        0, 0, 2, 0, 0, 0, 15, 50, 0, 0, 0, 0, 0, 0, 105, 38, 0, 0, 0, 0, 0, 0, 105, 23, 0, 0, 0, 0,
        0, 0, 191, 113, 0, 0, 0, 0, 0, 0, 133, 16, 0, 0, 255, 255, 255, 255, 87, 0, 0, 0, 1, 0, 0,
        0, 85, 0, 4, 0, 0, 0, 0, 0, 191, 97, 0, 0, 0, 0, 0, 0, 133, 16, 0, 0, 255, 255, 255, 255,
        87, 0, 0, 0, 1, 0, 0, 0, 21, 0, 3, 0, 0, 0, 0, 0, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 113, 24, 0, 0, 0, 0, 0, 0, 97, 146, 36, 0, 0, 0, 0, 0, 24, 1, 0, 0, 30, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 21, 2, 2, 0, 0, 0, 0, 0, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 220, 7, 0, 0, 16, 0, 0, 0, 220, 6, 0, 0, 16, 0, 0, 0, 183, 2, 0, 0, 30, 0, 0, 0, 191,
        115, 0, 0, 0, 0, 0, 0, 191, 100, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 6, 0, 0, 0, 191, 128, 0,
        0, 0, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 255, 2, 98, 32, 105, 110, 103, 114, 101, 115, 115,
        32, 111, 110, 32, 45, 45, 32, 115, 114, 99, 32, 37, 100, 32, 100, 115, 116, 32, 37, 100, 0,
        98, 32, 32, 101, 103, 114, 101, 115, 115, 32, 111, 110, 32, 45, 45, 32, 115, 114, 99, 32,
        37, 100, 32, 100, 115, 116, 32, 37, 100, 0, 71, 80, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0,
        0, 0, 0, 0, 0, 1, 0, 0, 0, 31, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 31, 0, 0, 0,
        208, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 31, 0, 0, 0, 32, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 31,
        0, 0, 0, 112, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 31, 0, 0, 0, 192, 1, 0, 0, 0, 0, 0, 0, 1, 0,
        0, 0, 31, 0, 0, 0, 16, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 31, 0, 0, 0, 96, 2, 0, 0, 0, 0, 0,
        0, 1, 0, 0, 0, 31, 0, 0, 0, 176, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 31, 0, 0, 0, 0, 3, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 31, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 29, 0, 0, 0, 224,
        1, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 2, 0, 0,
        0, 24, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 30, 0, 0, 0, 56, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
        27, 0, 0, 0, 80, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 27, 0, 0, 0, 159, 235, 1, 0, 24, 0, 0, 0,
        0, 0, 0, 0, 172, 8, 0, 0, 172, 8, 0, 0, 219, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0,
        1, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 2, 0,
        0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 10, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 8, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 8, 9, 0, 0, 0, 29, 0, 0, 0,
        0, 0, 0, 8, 10, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 2, 12, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 8, 13, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 8, 14, 0,
        0, 0, 60, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 32, 0, 0,
        0, 73, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0, 5, 0, 0, 0, 64, 0, 0, 0, 90, 0, 0, 0,
        7, 0, 0, 0, 128, 0, 0, 0, 96, 0, 0, 0, 11, 0, 0, 0, 192, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0,
        14, 15, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 18, 0, 0, 0, 112, 0, 0, 0, 34, 0, 0,
        4, 192, 0, 0, 0, 122, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 126, 0, 0, 0, 13, 0, 0, 0, 32, 0,
        0, 0, 135, 0, 0, 0, 13, 0, 0, 0, 64, 0, 0, 0, 140, 0, 0, 0, 13, 0, 0, 0, 96, 0, 0, 0, 154,
        0, 0, 0, 13, 0, 0, 0, 128, 0, 0, 0, 163, 0, 0, 0, 13, 0, 0, 0, 160, 0, 0, 0, 176, 0, 0, 0,
        13, 0, 0, 0, 192, 0, 0, 0, 185, 0, 0, 0, 13, 0, 0, 0, 224, 0, 0, 0, 196, 0, 0, 0, 13, 0, 0,
        0, 0, 1, 0, 0, 205, 0, 0, 0, 13, 0, 0, 0, 32, 1, 0, 0, 221, 0, 0, 0, 13, 0, 0, 0, 64, 1, 0,
        0, 229, 0, 0, 0, 13, 0, 0, 0, 96, 1, 0, 0, 238, 0, 0, 0, 19, 0, 0, 0, 128, 1, 0, 0, 241, 0,
        0, 0, 13, 0, 0, 0, 32, 2, 0, 0, 246, 0, 0, 0, 13, 0, 0, 0, 64, 2, 0, 0, 1, 1, 0, 0, 13, 0,
        0, 0, 96, 2, 0, 0, 6, 1, 0, 0, 13, 0, 0, 0, 128, 2, 0, 0, 15, 1, 0, 0, 13, 0, 0, 0, 160, 2,
        0, 0, 23, 1, 0, 0, 13, 0, 0, 0, 192, 2, 0, 0, 30, 1, 0, 0, 13, 0, 0, 0, 224, 2, 0, 0, 41,
        1, 0, 0, 13, 0, 0, 0, 0, 3, 0, 0, 51, 1, 0, 0, 20, 0, 0, 0, 32, 3, 0, 0, 62, 1, 0, 0, 20,
        0, 0, 0, 160, 3, 0, 0, 72, 1, 0, 0, 13, 0, 0, 0, 32, 4, 0, 0, 84, 1, 0, 0, 13, 0, 0, 0, 64,
        4, 0, 0, 95, 1, 0, 0, 13, 0, 0, 0, 96, 4, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 128, 4, 0, 0, 105,
        1, 0, 0, 23, 0, 0, 0, 192, 4, 0, 0, 112, 1, 0, 0, 13, 0, 0, 0, 0, 5, 0, 0, 121, 1, 0, 0,
        13, 0, 0, 0, 32, 5, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 64, 5, 0, 0, 130, 1, 0, 0, 13, 0, 0, 0,
        128, 5, 0, 0, 139, 1, 0, 0, 27, 0, 0, 0, 160, 5, 0, 0, 151, 1, 0, 0, 23, 0, 0, 0, 192, 5,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 13, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 3, 0, 0, 0, 0, 13, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 5, 8, 0,
        0, 0, 160, 1, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 65, 0, 0, 0, 170, 1,
        0, 0, 0, 0, 0, 8, 24, 0, 0, 0, 176, 1, 0, 0, 0, 0, 0, 1, 8, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0,
        0, 1, 0, 0, 5, 8, 0, 0, 0, 195, 1, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,
        64, 0, 0, 0, 198, 1, 0, 0, 0, 0, 0, 8, 28, 0, 0, 0, 203, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,
        8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 13, 2, 0, 0, 0, 217, 1, 0, 0, 17, 0, 0, 0, 221, 1, 0, 0,
        1, 0, 0, 12, 29, 0, 0, 0, 231, 1, 0, 0, 3, 0, 0, 4, 14, 0, 0, 0, 238, 1, 0, 0, 32, 0, 0, 0,
        0, 0, 0, 0, 245, 1, 0, 0, 32, 0, 0, 0, 48, 0, 0, 0, 254, 1, 0, 0, 33, 0, 0, 0, 96, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 28, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 6, 2, 0, 0, 0, 0,
        0, 8, 9, 0, 0, 0, 13, 2, 0, 0, 10, 0, 0, 132, 20, 0, 0, 0, 19, 2, 0, 0, 27, 0, 0, 0, 0, 0,
        0, 4, 23, 2, 0, 0, 27, 0, 0, 0, 4, 0, 0, 4, 31, 2, 0, 0, 27, 0, 0, 0, 8, 0, 0, 0, 35, 2, 0,
        0, 33, 0, 0, 0, 16, 0, 0, 0, 43, 2, 0, 0, 33, 0, 0, 0, 32, 0, 0, 0, 46, 2, 0, 0, 33, 0, 0,
        0, 48, 0, 0, 0, 55, 2, 0, 0, 27, 0, 0, 0, 64, 0, 0, 0, 154, 0, 0, 0, 27, 0, 0, 0, 72, 0, 0,
        0, 59, 2, 0, 0, 35, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 96, 0, 0, 0, 65, 2, 0,
        0, 0, 0, 0, 8, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 5, 8, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0,
        0, 0, 0, 73, 2, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 4, 8, 0, 0, 0, 79, 2,
        0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 85, 2, 0, 0, 38, 0, 0, 0, 32, 0, 0, 0, 91, 2, 0, 0, 0, 0, 0,
        8, 13, 0, 0, 0, 98, 2, 0, 0, 7, 0, 0, 132, 40, 0, 0, 0, 196, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0,
        4, 23, 2, 0, 0, 27, 0, 0, 0, 4, 0, 0, 4, 106, 2, 0, 0, 40, 0, 0, 0, 8, 0, 0, 0, 115, 2, 0,
        0, 33, 0, 0, 0, 32, 0, 0, 0, 127, 2, 0, 0, 27, 0, 0, 0, 48, 0, 0, 0, 135, 2, 0, 0, 27, 0,
        0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0,
        0, 27, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 5, 32, 0, 0, 0, 0, 0, 0, 0,
        42, 0, 0, 0, 0, 0, 0, 0, 73, 2, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 4, 32,
        0, 0, 0, 79, 2, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 85, 2, 0, 0, 43, 0, 0, 0, 128, 0, 0, 0, 145,
        2, 0, 0, 1, 0, 0, 4, 16, 0, 0, 0, 154, 2, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,
        0, 5, 16, 0, 0, 0, 160, 2, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 169, 2, 0, 0, 46, 0, 0, 0, 0, 0,
        0, 0, 179, 2, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 27, 0, 0,
        0, 4, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 33, 0, 0, 0, 4, 0, 0, 0, 8,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 38, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 189, 2,
        0, 0, 17, 0, 0, 132, 20, 0, 0, 0, 196, 2, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 203, 2, 0, 0, 33,
        0, 0, 0, 16, 0, 0, 0, 208, 2, 0, 0, 38, 0, 0, 0, 32, 0, 0, 0, 212, 2, 0, 0, 38, 0, 0, 0,
        64, 0, 0, 0, 220, 2, 0, 0, 9, 0, 0, 0, 96, 0, 0, 4, 225, 2, 0, 0, 9, 0, 0, 0, 100, 0, 0, 4,
        230, 2, 0, 0, 9, 0, 0, 0, 104, 0, 0, 1, 234, 2, 0, 0, 9, 0, 0, 0, 105, 0, 0, 1, 238, 2, 0,
        0, 9, 0, 0, 0, 106, 0, 0, 1, 242, 2, 0, 0, 9, 0, 0, 0, 107, 0, 0, 1, 246, 2, 0, 0, 9, 0, 0,
        0, 108, 0, 0, 1, 250, 2, 0, 0, 9, 0, 0, 0, 109, 0, 0, 1, 254, 2, 0, 0, 9, 0, 0, 0, 110, 0,
        0, 1, 2, 3, 0, 0, 9, 0, 0, 0, 111, 0, 0, 1, 6, 3, 0, 0, 33, 0, 0, 0, 112, 0, 0, 0, 59, 2,
        0, 0, 35, 0, 0, 0, 128, 0, 0, 0, 13, 3, 0, 0, 33, 0, 0, 0, 144, 0, 0, 0, 21, 3, 0, 0, 4, 0,
        0, 4, 8, 0, 0, 0, 196, 2, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 203, 2, 0, 0, 33, 0, 0, 0, 16, 0,
        0, 0, 122, 0, 0, 0, 33, 0, 0, 0, 32, 0, 0, 0, 59, 2, 0, 0, 35, 0, 0, 0, 48, 0, 0, 0, 0, 0,
        0, 0, 1, 0, 0, 13, 51, 0, 0, 0, 28, 3, 0, 0, 33, 0, 0, 0, 33, 3, 0, 0, 0, 0, 0, 8, 52, 0,
        0, 0, 38, 3, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 8, 0, 0, 4, 44, 3, 0, 0, 0, 0, 0, 12, 50, 0, 0,
        0, 55, 3, 0, 0, 0, 0, 0, 8, 27, 0, 0, 0, 58, 3, 0, 0, 0, 0, 0, 14, 54, 0, 0, 0, 1, 0, 0, 0,
        67, 3, 0, 0, 0, 0, 0, 14, 54, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 58, 0, 0, 0,
        79, 3, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 57, 0,
        0, 0, 4, 0, 0, 0, 30, 0, 0, 0, 84, 3, 0, 0, 0, 0, 0, 14, 59, 0, 0, 0, 0, 0, 0, 0, 102, 3,
        0, 0, 0, 0, 0, 14, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 58, 0, 0,
        0, 4, 0, 0, 0, 4, 0, 0, 0, 122, 3, 0, 0, 0, 0, 0, 14, 62, 0, 0, 0, 1, 0, 0, 0, 131, 3, 0,
        0, 0, 0, 0, 7, 0, 0, 0, 0, 140, 3, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 182, 7, 0, 0, 2, 0, 0, 15,
        2, 0, 0, 0, 55, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 56, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 188,
        7, 0, 0, 2, 0, 0, 15, 60, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 61, 0, 0, 0, 30,
        0, 0, 0, 30, 0, 0, 0, 196, 7, 0, 0, 1, 0, 0, 15, 4, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 4, 0,
        0, 0, 204, 7, 0, 0, 1, 0, 0, 15, 32, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 105,
        110, 116, 0, 95, 95, 65, 82, 82, 65, 89, 95, 83, 73, 90, 69, 95, 84, 89, 80, 69, 95, 95, 0,
        117, 49, 54, 0, 95, 95, 117, 49, 54, 0, 117, 110, 115, 105, 103, 110, 101, 100, 32, 115,
        104, 111, 114, 116, 0, 117, 51, 50, 0, 95, 95, 117, 51, 50, 0, 117, 110, 115, 105, 103,
        110, 101, 100, 32, 105, 110, 116, 0, 116, 121, 112, 101, 0, 109, 97, 120, 95, 101, 110,
        116, 114, 105, 101, 115, 0, 118, 97, 108, 117, 101, 0, 107, 101, 121, 0, 97, 108, 108, 111,
        119, 95, 112, 111, 114, 116, 115, 0, 95, 95, 115, 107, 95, 98, 117, 102, 102, 0, 108, 101,
        110, 0, 112, 107, 116, 95, 116, 121, 112, 101, 0, 109, 97, 114, 107, 0, 113, 117, 101, 117,
        101, 95, 109, 97, 112, 112, 105, 110, 103, 0, 112, 114, 111, 116, 111, 99, 111, 108, 0,
        118, 108, 97, 110, 95, 112, 114, 101, 115, 101, 110, 116, 0, 118, 108, 97, 110, 95, 116,
        99, 105, 0, 118, 108, 97, 110, 95, 112, 114, 111, 116, 111, 0, 112, 114, 105, 111, 114,
        105, 116, 121, 0, 105, 110, 103, 114, 101, 115, 115, 95, 105, 102, 105, 110, 100, 101, 120,
        0, 105, 102, 105, 110, 100, 101, 120, 0, 116, 99, 95, 105, 110, 100, 101, 120, 0, 99, 98,
        0, 104, 97, 115, 104, 0, 116, 99, 95, 99, 108, 97, 115, 115, 105, 100, 0, 100, 97, 116, 97,
        0, 100, 97, 116, 97, 95, 101, 110, 100, 0, 110, 97, 112, 105, 95, 105, 100, 0, 102, 97,
        109, 105, 108, 121, 0, 114, 101, 109, 111, 116, 101, 95, 105, 112, 52, 0, 108, 111, 99, 97,
        108, 95, 105, 112, 52, 0, 114, 101, 109, 111, 116, 101, 95, 105, 112, 54, 0, 108, 111, 99,
        97, 108, 95, 105, 112, 54, 0, 114, 101, 109, 111, 116, 101, 95, 112, 111, 114, 116, 0, 108,
        111, 99, 97, 108, 95, 112, 111, 114, 116, 0, 100, 97, 116, 97, 95, 109, 101, 116, 97, 0,
        116, 115, 116, 97, 109, 112, 0, 119, 105, 114, 101, 95, 108, 101, 110, 0, 103, 115, 111,
        95, 115, 101, 103, 115, 0, 103, 115, 111, 95, 115, 105, 122, 101, 0, 116, 115, 116, 97,
        109, 112, 95, 116, 121, 112, 101, 0, 104, 119, 116, 115, 116, 97, 109, 112, 0, 102, 108,
        111, 119, 95, 107, 101, 121, 115, 0, 95, 95, 117, 54, 52, 0, 117, 110, 115, 105, 103, 110,
        101, 100, 32, 108, 111, 110, 103, 32, 108, 111, 110, 103, 0, 115, 107, 0, 95, 95, 117, 56,
        0, 117, 110, 115, 105, 103, 110, 101, 100, 32, 99, 104, 97, 114, 0, 115, 107, 98, 0, 104,
        97, 110, 100, 108, 101, 95, 116, 99, 0, 101, 116, 104, 104, 100, 114, 0, 104, 95, 100, 101,
        115, 116, 0, 104, 95, 115, 111, 117, 114, 99, 101, 0, 104, 95, 112, 114, 111, 116, 111, 0,
        95, 95, 98, 101, 49, 54, 0, 105, 112, 104, 100, 114, 0, 105, 104, 108, 0, 118, 101, 114,
        115, 105, 111, 110, 0, 116, 111, 115, 0, 116, 111, 116, 95, 108, 101, 110, 0, 105, 100, 0,
        102, 114, 97, 103, 95, 111, 102, 102, 0, 116, 116, 108, 0, 99, 104, 101, 99, 107, 0, 95,
        95, 115, 117, 109, 49, 54, 0, 97, 100, 100, 114, 115, 0, 115, 97, 100, 100, 114, 0, 100,
        97, 100, 100, 114, 0, 95, 95, 98, 101, 51, 50, 0, 105, 112, 118, 54, 104, 100, 114, 0, 102,
        108, 111, 119, 95, 108, 98, 108, 0, 112, 97, 121, 108, 111, 97, 100, 95, 108, 101, 110, 0,
        110, 101, 120, 116, 104, 100, 114, 0, 104, 111, 112, 95, 108, 105, 109, 105, 116, 0, 105,
        110, 54, 95, 97, 100, 100, 114, 0, 105, 110, 54, 95, 117, 0, 117, 54, 95, 97, 100, 100,
        114, 56, 0, 117, 54, 95, 97, 100, 100, 114, 49, 54, 0, 117, 54, 95, 97, 100, 100, 114, 51,
        50, 0, 116, 99, 112, 104, 100, 114, 0, 115, 111, 117, 114, 99, 101, 0, 100, 101, 115, 116,
        0, 115, 101, 113, 0, 97, 99, 107, 95, 115, 101, 113, 0, 114, 101, 115, 49, 0, 100, 111,
        102, 102, 0, 102, 105, 110, 0, 115, 121, 110, 0, 114, 115, 116, 0, 112, 115, 104, 0, 97,
        99, 107, 0, 117, 114, 103, 0, 101, 99, 101, 0, 99, 119, 114, 0, 119, 105, 110, 100, 111,
        119, 0, 117, 114, 103, 95, 112, 116, 114, 0, 117, 100, 112, 104, 100, 114, 0, 112, 111,
        114, 116, 0, 98, 111, 111, 108, 0, 95, 66, 111, 111, 108, 0, 97, 108, 108, 111, 119, 95,
        112, 111, 114, 116, 0, 117, 56, 0, 114, 99, 95, 97, 108, 108, 111, 119, 0, 114, 99, 95,
        100, 105, 115, 97, 108, 108, 111, 119, 0, 99, 104, 97, 114, 0, 104, 97, 110, 100, 108, 101,
        95, 116, 99, 46, 95, 95, 95, 95, 102, 109, 116, 0, 104, 97, 110, 100, 108, 101, 95, 116,
        99, 46, 95, 95, 95, 95, 102, 109, 116, 46, 49, 0, 95, 108, 105, 99, 101, 110, 115, 101, 0,
        98, 112, 102, 95, 115, 111, 99, 107, 0, 98, 112, 102, 95, 102, 108, 111, 119, 95, 107, 101,
        121, 115, 0, 47, 104, 111, 109, 101, 47, 97, 122, 47, 101, 98, 112, 102, 45, 97, 112, 112,
        115, 47, 114, 117, 115, 116, 47, 104, 101, 108, 108, 111, 45, 108, 105, 98, 98, 112, 102,
        47, 115, 114, 99, 47, 98, 112, 102, 47, 116, 99, 46, 98, 112, 102, 46, 99, 0, 105, 110,
        116, 32, 104, 97, 110, 100, 108, 101, 95, 116, 99, 40, 115, 116, 114, 117, 99, 116, 32, 95,
        95, 115, 107, 95, 98, 117, 102, 102, 32, 42, 115, 107, 98, 41, 0, 32, 32, 32, 32, 118, 111,
        105, 100, 32, 42, 100, 97, 116, 97, 95, 101, 110, 100, 32, 61, 32, 40, 118, 111, 105, 100,
        42, 41, 40, 108, 111, 110, 103, 41, 115, 107, 98, 45, 62, 100, 97, 116, 97, 95, 101, 110,
        100, 59, 0, 32, 32, 32, 32, 115, 116, 114, 117, 99, 116, 32, 101, 116, 104, 104, 100, 114,
        32, 42, 101, 116, 104, 32, 61, 32, 40, 115, 116, 114, 117, 99, 116, 32, 101, 116, 104, 104,
        100, 114, 42, 41, 40, 118, 111, 105, 100, 42, 41, 40, 108, 111, 110, 103, 41, 115, 107, 98,
        45, 62, 100, 97, 116, 97, 59, 0, 32, 32, 32, 32, 105, 102, 32, 40, 101, 116, 104, 32, 43,
        32, 49, 32, 62, 32, 100, 97, 116, 97, 95, 101, 110, 100, 41, 32, 123, 0, 32, 32, 32, 32,
        105, 102, 32, 40, 101, 116, 104, 45, 62, 104, 95, 112, 114, 111, 116, 111, 32, 61, 61, 32,
        98, 112, 102, 95, 104, 116, 111, 110, 115, 40, 69, 84, 72, 95, 80, 95, 73, 80, 41, 41, 32,
        123, 32, 47, 47, 32, 105, 112, 118, 52, 0, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32,
        40, 40, 118, 111, 105, 100, 42, 41, 40, 105, 112, 104, 32, 43, 32, 49, 41, 32, 62, 32, 100,
        97, 116, 97, 95, 101, 110, 100, 41, 32, 123, 0, 32, 32, 32, 32, 32, 32, 32, 32, 116, 114,
        97, 110, 115, 95, 100, 97, 116, 97, 32, 61, 32, 40, 118, 111, 105, 100, 42, 41, 105, 112,
        104, 32, 43, 32, 40, 105, 112, 104, 45, 62, 105, 104, 108, 32, 42, 32, 52, 41, 59, 0, 32,
        32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 101, 116, 104, 45, 62, 104,
        95, 112, 114, 111, 116, 111, 32, 61, 61, 32, 98, 112, 102, 95, 104, 116, 111, 110, 115, 40,
        69, 84, 72, 95, 80, 95, 73, 80, 86, 54, 41, 41, 32, 123, 32, 47, 47, 32, 105, 112, 118, 54,
        0, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 40, 118, 111, 105, 100, 42, 41, 40,
        105, 112, 54, 104, 32, 43, 32, 49, 41, 32, 62, 32, 100, 97, 116, 97, 95, 101, 110, 100, 41,
        32, 123, 0, 32, 32, 32, 32, 95, 95, 117, 56, 32, 112, 114, 111, 116, 111, 32, 61, 32, 48,
        59, 0, 32, 32, 32, 32, 105, 102, 32, 40, 112, 114, 111, 116, 111, 32, 61, 61, 32, 73, 80,
        80, 82, 79, 84, 79, 95, 84, 67, 80, 41, 32, 32, 123, 0, 32, 32, 32, 32, 32, 32, 32, 32,
        105, 102, 32, 40, 40, 118, 111, 105, 100, 42, 41, 40, 116, 114, 97, 110, 115, 95, 100, 97,
        116, 97, 32, 43, 32, 115, 105, 122, 101, 111, 102, 40, 42, 116, 99, 112, 104, 41, 41, 32,
        62, 32, 100, 97, 116, 97, 95, 101, 110, 100, 41, 32, 123, 0, 32, 32, 32, 32, 32, 32, 32,
        32, 105, 102, 32, 40, 40, 118, 111, 105, 100, 42, 41, 40, 116, 114, 97, 110, 115, 95, 100,
        97, 116, 97, 32, 43, 32, 115, 105, 122, 101, 111, 102, 40, 42, 117, 100, 112, 104, 41, 41,
        32, 62, 32, 100, 97, 116, 97, 95, 101, 110, 100, 41, 32, 123, 0, 32, 32, 32, 32, 95, 95,
        98, 101, 49, 54, 32, 100, 115, 116, 32, 61, 32, 48, 59, 0, 32, 32, 32, 32, 95, 95, 98, 101,
        49, 54, 32, 115, 114, 99, 32, 61, 32, 48, 59, 0, 32, 32, 32, 32, 105, 102, 32, 40, 97, 108,
        108, 111, 119, 95, 112, 111, 114, 116, 40, 115, 114, 99, 41, 32, 124, 124, 32, 97, 108,
        108, 111, 119, 95, 112, 111, 114, 116, 40, 100, 115, 116, 41, 41, 32, 123, 0, 32, 32, 32,
        32, 32, 32, 32, 32, 114, 99, 32, 61, 32, 114, 99, 95, 97, 108, 108, 111, 119, 59, 0, 32,
        32, 32, 32, 105, 102, 32, 40, 115, 107, 98, 45, 62, 105, 110, 103, 114, 101, 115, 115, 95,
        105, 102, 105, 110, 100, 101, 120, 41, 32, 123, 0, 125, 0, 115, 116, 97, 116, 105, 99, 32,
        98, 111, 111, 108, 32, 97, 108, 108, 111, 119, 95, 112, 111, 114, 116, 40, 95, 95, 98, 101,
        49, 54, 32, 112, 111, 114, 116, 41, 0, 32, 32, 32, 32, 32, 32, 32, 32, 117, 51, 50, 32,
        107, 101, 121, 32, 61, 32, 105, 59, 0, 32, 32, 32, 32, 32, 32, 32, 32, 117, 49, 54, 32, 42,
        97, 108, 108, 111, 119, 95, 112, 111, 114, 116, 32, 61, 32, 98, 112, 102, 95, 109, 97, 112,
        95, 108, 111, 111, 107, 117, 112, 95, 101, 108, 101, 109, 40, 38, 97, 108, 108, 111, 119,
        95, 112, 111, 114, 116, 115, 44, 32, 38, 107, 101, 121, 41, 59, 0, 32, 32, 32, 32, 117, 49,
        54, 32, 104, 112, 111, 114, 116, 32, 61, 32, 98, 112, 102, 95, 110, 116, 111, 104, 115, 40,
        112, 111, 114, 116, 41, 59, 0, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 97, 108,
        108, 111, 119, 95, 112, 111, 114, 116, 32, 38, 38, 32, 104, 112, 111, 114, 116, 32, 61, 61,
        32, 42, 97, 108, 108, 111, 119, 95, 112, 111, 114, 116, 41, 32, 123, 0, 48, 58, 49, 54, 0,
        48, 58, 49, 53, 0, 48, 58, 50, 0, 48, 58, 55, 0, 48, 58, 48, 0, 48, 58, 52, 0, 48, 58, 49,
        0, 48, 58, 57, 0, 46, 100, 97, 116, 97, 0, 46, 114, 111, 100, 97, 116, 97, 0, 108, 105, 99,
        101, 110, 115, 101, 0, 46, 109, 97, 112, 115, 0, 46, 116, 101, 120, 116, 0, 116, 99, 0, 0,
        159, 235, 1, 0, 32, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 36, 0, 0, 0, 20, 6, 0, 0, 56, 6, 0,
        0, 204, 0, 0, 0, 8, 0, 0, 0, 210, 7, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0, 216, 7, 0,
        0, 1, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 16, 0, 0, 0, 210, 7, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0,
        154, 3, 0, 0, 197, 6, 0, 0, 0, 100, 0, 0, 16, 0, 0, 0, 154, 3, 0, 0, 233, 6, 0, 0, 13, 120,
        0, 0, 32, 0, 0, 0, 154, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 154, 3, 0, 0, 254, 6,
        0, 0, 27, 124, 0, 0, 64, 0, 0, 0, 154, 3, 0, 0, 65, 7, 0, 0, 17, 108, 0, 0, 72, 0, 0, 0,
        154, 3, 0, 0, 98, 7, 0, 0, 24, 128, 0, 0, 80, 0, 0, 0, 154, 3, 0, 0, 98, 7, 0, 0, 36, 128,
        0, 0, 88, 0, 0, 0, 154, 3, 0, 0, 98, 7, 0, 0, 13, 128, 0, 0, 104, 0, 0, 0, 154, 3, 0, 0,
        233, 6, 0, 0, 13, 120, 0, 0, 120, 0, 0, 0, 154, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0,
        0, 154, 3, 0, 0, 254, 6, 0, 0, 27, 124, 0, 0, 152, 0, 0, 0, 154, 3, 0, 0, 98, 7, 0, 0, 24,
        128, 0, 0, 160, 0, 0, 0, 154, 3, 0, 0, 98, 7, 0, 0, 36, 128, 0, 0, 168, 0, 0, 0, 154, 3, 0,
        0, 98, 7, 0, 0, 13, 128, 0, 0, 184, 0, 0, 0, 154, 3, 0, 0, 233, 6, 0, 0, 13, 120, 0, 0,
        200, 0, 0, 0, 154, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 154, 3, 0, 0, 254, 6, 0,
        0, 27, 124, 0, 0, 232, 0, 0, 0, 154, 3, 0, 0, 98, 7, 0, 0, 24, 128, 0, 0, 240, 0, 0, 0,
        154, 3, 0, 0, 98, 7, 0, 0, 36, 128, 0, 0, 248, 0, 0, 0, 154, 3, 0, 0, 98, 7, 0, 0, 13, 128,
        0, 0, 8, 1, 0, 0, 154, 3, 0, 0, 233, 6, 0, 0, 13, 120, 0, 0, 24, 1, 0, 0, 154, 3, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 32, 1, 0, 0, 154, 3, 0, 0, 254, 6, 0, 0, 27, 124, 0, 0, 56, 1, 0, 0,
        154, 3, 0, 0, 98, 7, 0, 0, 24, 128, 0, 0, 64, 1, 0, 0, 154, 3, 0, 0, 98, 7, 0, 0, 36, 128,
        0, 0, 72, 1, 0, 0, 154, 3, 0, 0, 98, 7, 0, 0, 13, 128, 0, 0, 88, 1, 0, 0, 154, 3, 0, 0,
        233, 6, 0, 0, 13, 120, 0, 0, 104, 1, 0, 0, 154, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 1, 0,
        0, 154, 3, 0, 0, 254, 6, 0, 0, 27, 124, 0, 0, 136, 1, 0, 0, 154, 3, 0, 0, 98, 7, 0, 0, 24,
        128, 0, 0, 144, 1, 0, 0, 154, 3, 0, 0, 98, 7, 0, 0, 36, 128, 0, 0, 152, 1, 0, 0, 154, 3, 0,
        0, 98, 7, 0, 0, 13, 128, 0, 0, 168, 1, 0, 0, 154, 3, 0, 0, 233, 6, 0, 0, 13, 120, 0, 0,
        184, 1, 0, 0, 154, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 1, 0, 0, 154, 3, 0, 0, 254, 6, 0,
        0, 27, 124, 0, 0, 216, 1, 0, 0, 154, 3, 0, 0, 98, 7, 0, 0, 24, 128, 0, 0, 224, 1, 0, 0,
        154, 3, 0, 0, 98, 7, 0, 0, 36, 128, 0, 0, 232, 1, 0, 0, 154, 3, 0, 0, 98, 7, 0, 0, 13, 128,
        0, 0, 248, 1, 0, 0, 154, 3, 0, 0, 233, 6, 0, 0, 13, 120, 0, 0, 8, 2, 0, 0, 154, 3, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 16, 2, 0, 0, 154, 3, 0, 0, 254, 6, 0, 0, 27, 124, 0, 0, 40, 2, 0, 0,
        154, 3, 0, 0, 98, 7, 0, 0, 24, 128, 0, 0, 48, 2, 0, 0, 154, 3, 0, 0, 98, 7, 0, 0, 36, 128,
        0, 0, 56, 2, 0, 0, 154, 3, 0, 0, 98, 7, 0, 0, 13, 128, 0, 0, 72, 2, 0, 0, 154, 3, 0, 0,
        233, 6, 0, 0, 13, 120, 0, 0, 88, 2, 0, 0, 154, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 2, 0,
        0, 154, 3, 0, 0, 254, 6, 0, 0, 27, 124, 0, 0, 120, 2, 0, 0, 154, 3, 0, 0, 98, 7, 0, 0, 24,
        128, 0, 0, 128, 2, 0, 0, 154, 3, 0, 0, 98, 7, 0, 0, 36, 128, 0, 0, 136, 2, 0, 0, 154, 3, 0,
        0, 98, 7, 0, 0, 13, 128, 0, 0, 152, 2, 0, 0, 154, 3, 0, 0, 233, 6, 0, 0, 13, 120, 0, 0,
        168, 2, 0, 0, 154, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 2, 0, 0, 154, 3, 0, 0, 254, 6, 0,
        0, 27, 124, 0, 0, 200, 2, 0, 0, 154, 3, 0, 0, 98, 7, 0, 0, 24, 128, 0, 0, 208, 2, 0, 0,
        154, 3, 0, 0, 98, 7, 0, 0, 36, 128, 0, 0, 216, 2, 0, 0, 154, 3, 0, 0, 98, 7, 0, 0, 13, 128,
        0, 0, 232, 2, 0, 0, 154, 3, 0, 0, 233, 6, 0, 0, 13, 120, 0, 0, 248, 2, 0, 0, 154, 3, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 154, 3, 0, 0, 254, 6, 0, 0, 27, 124, 0, 0, 24, 3, 0, 0,
        154, 3, 0, 0, 98, 7, 0, 0, 24, 128, 0, 0, 32, 3, 0, 0, 154, 3, 0, 0, 98, 7, 0, 0, 36, 128,
        0, 0, 40, 3, 0, 0, 154, 3, 0, 0, 98, 7, 0, 0, 13, 128, 0, 0, 72, 3, 0, 0, 154, 3, 0, 0,
        195, 6, 0, 0, 1, 152, 0, 0, 216, 7, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 154, 3, 0, 0, 208, 3, 0,
        0, 0, 168, 0, 0, 16, 0, 0, 0, 154, 3, 0, 0, 245, 3, 0, 0, 40, 216, 0, 0, 24, 0, 0, 0, 154,
        3, 0, 0, 38, 4, 0, 0, 60, 220, 0, 0, 32, 0, 0, 0, 154, 3, 0, 0, 103, 4, 0, 0, 13, 228, 0,
        0, 48, 0, 0, 0, 154, 3, 0, 0, 103, 4, 0, 0, 9, 228, 0, 0, 56, 0, 0, 0, 154, 3, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 154, 3, 0, 0, 133, 4, 0, 0, 14, 244, 0, 0, 88, 0, 0, 0, 154,
        3, 0, 0, 133, 4, 0, 0, 9, 244, 0, 0, 104, 0, 0, 0, 154, 3, 0, 0, 188, 4, 0, 0, 25, 252, 0,
        0, 112, 0, 0, 0, 154, 3, 0, 0, 188, 4, 0, 0, 13, 252, 0, 0, 144, 0, 0, 0, 154, 3, 0, 0,
        231, 4, 0, 0, 41, 16, 1, 0, 152, 0, 0, 0, 154, 3, 0, 0, 231, 4, 0, 0, 45, 16, 1, 0, 168, 0,
        0, 0, 154, 3, 0, 0, 231, 4, 0, 0, 33, 16, 1, 0, 184, 0, 0, 0, 154, 3, 0, 0, 25, 5, 0, 0,
        21, 20, 1, 0, 192, 0, 0, 0, 154, 3, 0, 0, 25, 5, 0, 0, 16, 20, 1, 0, 208, 0, 0, 0, 154, 3,
        0, 0, 89, 5, 0, 0, 26, 28, 1, 0, 216, 0, 0, 0, 154, 3, 0, 0, 89, 5, 0, 0, 13, 28, 1, 0, 0,
        1, 0, 0, 154, 3, 0, 0, 133, 5, 0, 0, 10, 204, 0, 0, 8, 1, 0, 0, 154, 3, 0, 0, 153, 5, 0, 0,
        9, 64, 1, 0, 48, 1, 0, 0, 154, 3, 0, 0, 186, 5, 0, 0, 32, 76, 1, 0, 64, 1, 0, 0, 154, 3, 0,
        0, 186, 5, 0, 0, 13, 76, 1, 0, 128, 1, 0, 0, 154, 3, 0, 0, 248, 5, 0, 0, 32, 108, 1, 0,
        144, 1, 0, 0, 154, 3, 0, 0, 248, 5, 0, 0, 13, 108, 1, 0, 200, 1, 0, 0, 154, 3, 0, 0, 54, 6,
        0, 0, 12, 192, 0, 0, 208, 1, 0, 0, 154, 3, 0, 0, 74, 6, 0, 0, 12, 196, 0, 0, 216, 1, 0, 0,
        154, 3, 0, 0, 94, 6, 0, 0, 9, 152, 1, 0, 240, 1, 0, 0, 154, 3, 0, 0, 94, 6, 0, 0, 25, 152,
        1, 0, 248, 1, 0, 0, 154, 3, 0, 0, 94, 6, 0, 0, 28, 152, 1, 0, 16, 2, 0, 0, 154, 3, 0, 0,
        94, 6, 0, 0, 9, 152, 1, 0, 24, 2, 0, 0, 154, 3, 0, 0, 140, 6, 0, 0, 14, 156, 1, 0, 48, 2,
        0, 0, 154, 3, 0, 0, 163, 6, 0, 0, 14, 172, 1, 0, 96, 2, 0, 0, 154, 3, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 152, 2, 0, 0, 154, 3, 0, 0, 195, 6, 0, 0, 1, 224, 1, 0, 16, 0, 0, 0, 216, 7, 0, 0,
        12, 0, 0, 0, 16, 0, 0, 0, 18, 0, 0, 0, 148, 7, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 18, 0, 0, 0,
        153, 7, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 31, 0, 0, 0, 158, 7, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0,
        34, 0, 0, 0, 162, 7, 0, 0, 0, 0, 0, 0, 144, 0, 0, 0, 34, 0, 0, 0, 166, 7, 0, 0, 0, 0, 0, 0,
        184, 0, 0, 0, 31, 0, 0, 0, 158, 7, 0, 0, 0, 0, 0, 0, 224, 0, 0, 0, 39, 0, 0, 0, 170, 7, 0,
        0, 0, 0, 0, 0, 80, 1, 0, 0, 48, 0, 0, 0, 166, 7, 0, 0, 0, 0, 0, 0, 104, 1, 0, 0, 48, 0, 0,
        0, 174, 7, 0, 0, 0, 0, 0, 0, 160, 1, 0, 0, 49, 0, 0, 0, 166, 7, 0, 0, 0, 0, 0, 0, 184, 1,
        0, 0, 49, 0, 0, 0, 174, 7, 0, 0, 0, 0, 0, 0, 48, 2, 0, 0, 18, 0, 0, 0, 178, 7, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 93, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 160, 1, 0, 0, 0, 0, 0, 0, 24, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
        0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184, 4, 0, 0, 0, 0, 0, 0, 80, 3, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 1, 0,
        0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 160, 2, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0,
        0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 10, 0, 0, 0, 0, 0,
        0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 32, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 170, 10,
        0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 230, 10, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 240, 10, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 1, 0, 0, 9, 0, 0, 0, 64, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 11, 0, 0, 0, 0, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0, 2,
        0, 0, 0, 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 72, 1, 0, 0, 9, 0, 0,
        0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 11, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
        0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 79, 1,
        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 12, 0, 0, 0, 0, 0, 0,
        159, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 84, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 28,
        0, 0, 0, 0, 0, 0, 36, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0,
    ];
}
